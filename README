PH-tree
=======

The PH-tree is a multi-dimensional indexing and storage structure.
By default it stores k-dimensional keys consisting of k integers. However, it can also be used
to efficiently store floating point values and/or ranged objects such as k-dimensional boxes.

The PH-tree was developed at ETH Zurich and first published in:
"The PH-Tree: A Space-Efficient Storage Structure and Multi-Dimensional Index", 
Tilmann Zaeschke, Christoph Zimmerli and Moira C. Norrie, 
Proceedings of Intl. Conf. on Management of Data (SIGMOD), 2014

Contact:
{zaeschke,zimmerli,norrie)@inf.ethz.ch


Interfaces / Abstract Classes
=============================
This archive contains four variants and multiple versions of the PH-tree.

The four variants are:

PhTree          For point data with integer coordinates. This is the native storage format.
PhTreeF         For point data with floating point coordinates.
PhTreeSolid     For intervals/rectangles/boxes (solids) with integer coordinates.
PhTreeSolidF    For intervals/rectangles/boxes (solids) with floating point coordinates.

They can be created with PhTreeXYZ.create(dimensions). The default key-width is 64bit per dimension.
The old non-value API is still available in the 'test' folder.
All queries return specialised iterators that give direct access to key, value or entry.
The queryAll() methods return lists of entries and are especially useful for small result sets. 

The packages ch.ethz.globis.pht.v* contain different versions of the PH-tree. They are the actual
implementations of the four interfaces mentioned above.
A higher version number usually (not always) indicates better performance in terms of base speed,
scalability (size and dimensionality) as well as storage requirements.
